// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

contract MyToken {
    // Public variables
    string public tokenName;
    string public tokenAbb;
    uint public allSupply;

    // Mapping variables
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowances;

    // Events
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    event Mint(address indexed to, uint value);
    event Burn(address indexed from, uint value);

    // Constructor
    constructor() {
        tokenName = "BRAHMAN"; // Changed token name
        tokenAbb = "BMN";      // Changed token abbreviation
        allSupply = 50000;
        balances[msg.sender] = allSupply; // Assign initial supply to the contract creator
    }

    // Mint function
    function mint(address _address, uint _value) public {
        allSupply += _value;
        balances[_address] += _value;
        emit Mint(_address, _value);
    }

    // Burn function
    function burn(uint _value) public {
        require(balances[msg.sender] >= _value, "Insufficient balance");
        allSupply -= _value;
        balances[msg.sender] -= _value;
        emit Burn(msg.sender, _value);
    }

    // Transfer function
    function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] >= _value, "Insufficient balance");
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    // Airdrop function
    function airdrop(address[] memory _addresses, uint _value) public {
        for (uint i = 0; i < _addresses.length; i++) {
            mint(_addresses[i], _value);
        }
    }

    // Approve function
    function approve(address _spender, uint _value) public returns (bool) {
        allowances[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    // Transfer from function
    function transferFrom(address _from, address _to, uint _value) public returns (bool) {
        require(balances[_from] >= _value, "Insufficient balance");
        require(allowances[_from][msg.sender] >= _value, "Allowance exceeded");

        balances[_from] -= _value;
        balances[_to] += _value;
        allowances[_from][msg.sender] -= _value;

        emit Transfer(_from, _to, _value);
        return true;
    }

    // Get balance of an address
    function balanceOf(address _owner) public view returns (uint) {
        return balances[_owner];
    }

    // Get allowance of a spender
    function allowance(address _owner, address _spender) public view returns (uint) {
        return allowances[_owner][_spender];
    }
}
